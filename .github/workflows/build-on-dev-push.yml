name: Build/Publish on push

on:
  push:
    branches:
      - "*dev*"
      - "*master*"
      - "*main*"
    tags:
      - "*"
jobs:
  job1:
    permissions:
      contents: write # for release-drafter/release-drafter to create a github release
    name: build_and_release
    runs-on: windows-latest

    env:
      configuration: Release
      Main_Project: Ui/Ui.csproj
      Action_Url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

    steps:
      - name: Echo
        shell: pwsh
        run: |
          echo "url = $env:Action_Url"
          echo "home = $HOME"
          echo "github.ref = ${{ github.ref }}"

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive

      # Install the .NET Core workload https://github.com/actions/setup-dotnet
      - name: Install .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 6.0.x

      # Add MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v1.1

      # cache nuget packages: https://github.com/actions/cache
      - name: Cache nuget packages
        id: cache-nuget-packages
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}\.nuget\packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('Ui/Ui.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Cache nuget packages home
        id: cache-nuget-packages-home
        uses: actions/cache@v3
        with:
          path: C:\Users\runneradmin\.nuget\packages
          key: ${{ runner.os }}-nuget-home-${{ hashFiles('Ui/Ui.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-home

      # Restore nuget packages
      - name: Restore nuget packages üì¶Ô∏è
        run: msbuild $env:Main_Project /t:Restore /p:Configuration=$env:Configuration

      # Run script
      - name: Run script
        shell: pwsh
        run: |
          ./scripts/Set-Secret.ps1 -filePath .\Ui\Assert.cs -Pattern "===REPLACE_ME_WITH_APP_CENTER_SECRET===" -Secret ${{ secrets.APP_CENTER_SECRET }}
          ./scripts/Set-Secret.ps1 -filePath .\Ui\Assert.cs -Pattern "===REPLACE_ME_WITH_SALT===" -Secret ${{ secrets.GLOBAL_STRING_ENCRYPTION_SLAT }}

      # Get ${{env.BuildVersion}} and ${{env.PreRelease}}
      - name: Get Version
        id: get_version
        run: ./scripts/Get-Version.ps1

      # echo ${{env.BuildVersion}} and ${{env.PreRelease}}
      - name: Echo Version
        shell: pwsh
        if: ${{env.PreRelease}} != ""
        run: |
          echo ${{env.BuildVersion}}
          echo ${{env.PreRelease}}

      # Publish the application Net4.8
      - name: Publish the application Net4.8
        run: dotnet publish $env:Main_Project -p:PublishProfile=./Ui/Properties/PublishProfiles/x64-net48.pubxml
      # artifact
      - uses: actions/upload-artifact@v3
        with:
          name: 1Remote-${{env.BuildVersion}}-net4.8(not recommended)
          path: Ui/bin/Release/net4.8-windows/publish
      # zip
      - name: Easy Zip Files
        uses: vimtor/action-zip@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: Ui/bin/Release/net4.8-windows/publish
          dest: 1Remote-${{env.BuildVersion}}-net4.8.zip

      # Publish the application Net6.0
      - name: Publish the application
        run: dotnet publish $env:Main_Project -p:PublishProfile=./Ui/Properties/PublishProfiles/x64-single.file.application.pubxml
      # artifact
      - uses: actions/upload-artifact@v3
        with:
          name: 1Remote-${{env.BuildVersion}}-net6-x64.zip
          path: Ui/bin/Release/net6.0-windows/publish/win-x64
      # zip
      - name: Easy Zip Files
        uses: vimtor/action-zip@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: Ui/bin/Release/net6.0-windows/publish/win-x64
          dest: 1Remote-${{env.BuildVersion}}-net6-x64.zip

      # make release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      # upload package net6.x
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: 1Remote-${{env.BuildVersion}}-net6-x64.zip
          asset_name: 1Remote-${{env.BuildVersion}}-net6-x64.zip
          asset_content_type: application/zip

      # upload package net4.8
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: 1Remote-${{env.BuildVersion}}-net4.8.zip
          asset_name: 1Remote-${{env.BuildVersion}}-net4.8.zip
          asset_content_type: application/zip

      # set changelogs
      - uses: actions/setup-node@v3
        if: startsWith(github.ref, 'refs/tags/')
        with:
          node-version: 16.x
      - run: npx changelogithub #--draft #--prerelease # or changelogithub@0.12 if ensure the stable result
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

  job2:
    name: Build and publish docker image
    runs-on: ubuntu-latest
    needs: job1
    # echo ${{env.BuildVersion}} and ${{env.PreRelease}}
    steps:
      - name: Echo
        run: |
          echo ${{env.BuildVersion}}
          echo ${{env.PreRelease}}
